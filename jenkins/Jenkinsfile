pipeline {
  agent any
  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }
  stages {
    stage('Checkout') {
      steps {
        dir('../') {
          sh '''
            git reset --hard
            git clean -fd
            git checkout main
            git pull || echo "Using local repo without pulling"
          '''
        }
      }
    }
    stage('Build and Test') {
      steps {
        dir('packages/getting-started') {
          sh 'ls -ltr'
          echo "Building Quarkus application with Gradle..."
          ./gradlew clean build --no-daemon
          echo "Build finished. Running tests..."
          ./gradlew test --no-daemon
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://localhost:5002"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh './gradlew sonarqube -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL} --no-daemon'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "localhost:5000/getting-started:${build_version}"
      }
      steps {
        script {
          sh '''
            docker build -f packages/getting-started/Dockerfile -t ${DOCKER_IMAGE} .
            docker push ${DOCKER_IMAGE}
          '''
        }
      }
    }
    stage('Update Deployment File') {
      steps {
        sh '''
            cd packages/getting-started
            git config user.email "77030734+velvetcode206@users.noreply.github.com"
            git config user.name "velvetcode206"
            sed -i "s/^version = .*/version = \\"${build_version}\\"/" build.gradle.kts
            git add build.gradle.kts
            git commit -m "chore(getting-started): update app version to ${build_version}"
        '''
      }
    }
  }
}
